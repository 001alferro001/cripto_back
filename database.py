import asyncio
import logging
import os
import psycopg2
from psycopg2.extras import RealDictCursor
from psycopg2 import sql
from typing import List, Dict, Optional, Any
from datetime import datetime, timedelta, timezone
import json

logger = logging.getLogger(__name__)


class DatabaseManager:
    def __init__(self):
        self.connection = None
        self.db_config = {
            'host': os.getenv('DB_HOST', 'localhost'),
            'port': int(os.getenv('DB_PORT', 5432)),
            'database': os.getenv('DB_NAME', 'trading_analyzer'),
            'user': os.getenv('DB_USER', 'postgres'),
            'password': os.getenv('DB_PASSWORD', 'password')
        }

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = psycopg2.connect(**self.db_config)
            self.connection.autocommit = True
            await self.create_tables()
            await self.migrate_database()  # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    async def migrate_database(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        cursor = self.connection.cursor()
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ watchlist
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'watchlist' AND column_name = 'added_at'
            """)
            
            if not cursor.fetchone():
                logger.info("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ added_at –≤ —Ç–∞–±–ª–∏—Ü—É watchlist")
                cursor.execute("""
                    ALTER TABLE watchlist 
                    ADD COLUMN added_at TIMESTAMPTZ DEFAULT NOW()
                """)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º updated_at –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'watchlist' AND column_name = 'updated_at'
            """)
            
            if not cursor.fetchone():
                logger.info("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ updated_at –≤ —Ç–∞–±–ª–∏—Ü—É watchlist")
                cursor.execute("""
                    ALTER TABLE watchlist 
                    ADD COLUMN updated_at TIMESTAMPTZ DEFAULT NOW()
                """)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            cursor.execute("""
                UPDATE watchlist 
                SET added_at = COALESCE(added_at, NOW()), 
                    updated_at = COALESCE(updated_at, NOW()) 
                WHERE added_at IS NULL OR updated_at IS NULL
            """)

            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {type(e).__name__}: {str(e)}")
            raise
        finally:
            cursor.close()

    async def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        cursor = self.connection.cursor()
        
        try:
            # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS watchlist (
                    id SERIAL PRIMARY KEY,
                    symbol VARCHAR(20) UNIQUE NOT NULL,
                    is_active BOOLEAN DEFAULT TRUE,
                    price_drop_percentage FLOAT,
                    current_price FLOAT,
                    historical_price FLOAT,
                    added_at TIMESTAMPTZ DEFAULT NOW(),
                    updated_at TIMESTAMPTZ DEFAULT NOW()
                )
            """)

            # –¢–∞–±–ª–∏—Ü–∞ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS kline_data (
                    id SERIAL PRIMARY KEY,
                    symbol VARCHAR(20) NOT NULL,
                    timestamp_ms BIGINT NOT NULL,
                    open_price DECIMAL(20, 8) NOT NULL,
                    high_price DECIMAL(20, 8) NOT NULL,
                    low_price DECIMAL(20, 8) NOT NULL,
                    close_price DECIMAL(20, 8) NOT NULL,
                    volume DECIMAL(20, 8) NOT NULL,
                    is_closed BOOLEAN DEFAULT FALSE,
                    is_long BOOLEAN,
                    created_at TIMESTAMPTZ DEFAULT NOW(),
                    UNIQUE(symbol, timestamp_ms)
                )
            """)

            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_kline_symbol_timestamp 
                ON kline_data(symbol, timestamp_ms DESC)
            """)
            
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_kline_symbol_closed 
                ON kline_data(symbol, is_closed, timestamp_ms DESC)
            """)

            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS streaming_data (
                    id SERIAL PRIMARY KEY,
                    symbol VARCHAR(20) NOT NULL,
                    timestamp_ms BIGINT NOT NULL,
                    open_price DECIMAL(20, 8) NOT NULL,
                    high_price DECIMAL(20, 8) NOT NULL,
                    low_price DECIMAL(20, 8) NOT NULL,
                    close_price DECIMAL(20, 8) NOT NULL,
                    volume DECIMAL(20, 8) NOT NULL,
                    updated_at TIMESTAMPTZ DEFAULT NOW(),
                    UNIQUE(symbol, timestamp_ms)
                )
            """)

            # –¢–∞–±–ª–∏—Ü–∞ –∞–ª–µ—Ä—Ç–æ–≤
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS alerts (
                    id SERIAL PRIMARY KEY,
                    symbol VARCHAR(20) NOT NULL,
                    alert_type VARCHAR(50) NOT NULL,
                    price DECIMAL(20, 8) NOT NULL,
                    volume_ratio FLOAT,
                    current_volume_usdt BIGINT,
                    average_volume_usdt BIGINT,
                    consecutive_count INTEGER,
                    alert_timestamp_ms BIGINT NOT NULL,
                    close_timestamp_ms BIGINT,
                    is_closed BOOLEAN DEFAULT FALSE,
                    is_true_signal BOOLEAN,
                    has_imbalance BOOLEAN DEFAULT FALSE,
                    imbalance_data JSONB,
                    candle_data JSONB,
                    order_book_snapshot JSONB,
                    message TEXT,
                    created_at TIMESTAMPTZ DEFAULT NOW()
                )
            """)

            # –¢–∞–±–ª–∏—Ü–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS favorites (
                    id SERIAL PRIMARY KEY,
                    symbol VARCHAR(20) UNIQUE NOT NULL,
                    notes TEXT,
                    color VARCHAR(7) DEFAULT '#FFD700',
                    sort_order INTEGER DEFAULT 0,
                    created_at TIMESTAMPTZ DEFAULT NOW(),
                    updated_at TIMESTAMPTZ DEFAULT NOW()
                )
            """)

            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS trading_settings (
                    id SERIAL PRIMARY KEY,
                    account_balance DECIMAL(20, 2) DEFAULT 10000,
                    max_risk_per_trade DECIMAL(5, 2) DEFAULT 2.0,
                    max_open_trades INTEGER DEFAULT 5,
                    default_stop_loss_percentage DECIMAL(5, 2) DEFAULT 2.0,
                    default_take_profit_percentage DECIMAL(5, 2) DEFAULT 4.0,
                    auto_calculate_quantity BOOLEAN DEFAULT TRUE,
                    updated_at TIMESTAMPTZ DEFAULT NOW()
                )
            """)

            # –¢–∞–±–ª–∏—Ü–∞ –±—É–º–∞–∂–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS paper_trades (
                    id SERIAL PRIMARY KEY,
                    symbol VARCHAR(20) NOT NULL,
                    trade_type VARCHAR(10) NOT NULL,
                    entry_price DECIMAL(20, 8) NOT NULL,
                    exit_price DECIMAL(20, 8),
                    quantity DECIMAL(20, 8) NOT NULL,
                    stop_loss DECIMAL(20, 8),
                    take_profit DECIMAL(20, 8),
                    risk_amount DECIMAL(20, 2),
                    risk_percentage DECIMAL(5, 2),
                    potential_profit DECIMAL(20, 2),
                    potential_loss DECIMAL(20, 2),
                    risk_reward_ratio DECIMAL(10, 2),
                    actual_profit_loss DECIMAL(20, 2),
                    status VARCHAR(20) DEFAULT 'OPEN',
                    exit_reason VARCHAR(50),
                    notes TEXT,
                    alert_id INTEGER,
                    entry_time TIMESTAMPTZ DEFAULT NOW(),
                    exit_time TIMESTAMPTZ
                )
            """)

            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            cursor.execute("""
                INSERT INTO trading_settings (id) 
                SELECT 1 WHERE NOT EXISTS (SELECT 1 FROM trading_settings WHERE id = 1)
            """)

            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {type(e).__name__}: {str(e)}")
            raise
        finally:
            cursor.close()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å watchlist
    async def get_watchlist(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        cursor = self.connection.cursor()
        try:
            cursor.execute("SELECT symbol FROM watchlist WHERE is_active = TRUE ORDER BY symbol")
            return [row[0] for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è watchlist: {type(e).__name__}: {str(e)}")
            return []
        finally:
            cursor.close()

    async def get_watchlist_details(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö"""
        cursor = self.connection.cursor()
        try:
            logger.debug("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π watchlist...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π cursor)
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'watchlist'
                )
            """)
            
            result = cursor.fetchone()
            table_exists = result[0] if result else False
            
            if not table_exists:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ watchlist –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'watchlist'
                ORDER BY column_name
            """)
            columns = [row[0] for row in cursor.fetchall()]
            logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ watchlist: {columns}")
            
            if not columns:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ watchlist")
                return []
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
            required_columns = ["id", "symbol", "is_active"]
            optional_columns = ["price_drop_percentage", "current_price", "historical_price", "added_at", "updated_at"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            missing_required = [col for col in required_columns if col not in columns]
            if missing_required:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_required}")
                return []
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            available_columns = required_columns.copy()
            for col in optional_columns:
                if col in columns:
                    available_columns.append(col)
            
            query_columns = ", ".join(available_columns)
            logger.debug(f"üîç –ó–∞–ø—Ä–æ—Å —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: {query_columns}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π cursor –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º RealDictCursor –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            cursor.close()
            cursor = self.connection.cursor(cursor_factory=RealDictCursor)
            
            cursor.execute(f"""
                SELECT {query_columns}
                FROM watchlist 
                ORDER BY symbol
            """)
            
            results = cursor.fetchall()
            logger.debug(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π –∏–∑ watchlist")
            
            return [dict(row) for row in results]
            
        except psycopg2.Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π watchlist: {e.pgcode} - {e.pgerror}")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π watchlist: {type(e).__name__}: {str(e)}")
            import traceback
            logger.error(f"‚ùå –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return []
        finally:
            if cursor:
                cursor.close()

    async def add_to_watchlist(self, symbol: str, price_drop: float = None, 
                              current_price: float = None, historical_price: float = None):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –≤ watchlist"""
        cursor = self.connection.cursor()
        try:
            cursor.execute("""
                INSERT INTO watchlist (symbol, price_drop_percentage, current_price, historical_price)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (symbol) DO UPDATE SET
                    is_active = TRUE,
                    price_drop_percentage = EXCLUDED.price_drop_percentage,
                    current_price = EXCLUDED.current_price,
                    historical_price = EXCLUDED.historical_price,
                    updated_at = NOW()
            """, (symbol, price_drop, current_price, historical_price))
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä–∞ {symbol} –≤ watchlist")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {symbol} –≤ watchlist: {type(e).__name__}: {str(e)}")
            raise
        finally:
            cursor.close()

    async def remove_from_watchlist(self, symbol: str = None, item_id: int = None):
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –∏–∑ watchlist"""
        cursor = self.connection.cursor()
        try:
            if item_id:
                cursor.execute("DELETE FROM watchlist WHERE id = %s", (item_id,))
            elif symbol:
                cursor.execute("DELETE FROM watchlist WHERE symbol = %s", (symbol,))
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞—Ä–∞ –∏–∑ watchlist")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ watchlist: {type(e).__name__}: {str(e)}")
            raise
        finally:
            cursor.close()

    async def update_watchlist_item(self, item_id: int, symbol: str, is_active: bool):
        """–û–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç watchlist"""
        cursor = self.connection.cursor()
        try:
            cursor.execute("""
                UPDATE watchlist 
                SET symbol = %s, is_active = %s, updated_at = NOW()
                WHERE id = %s
            """, (symbol, is_active, item_id))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è watchlist: {type(e).__name__}: {str(e)}")
            raise
        finally:
            cursor.close()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å kline –¥–∞–Ω–Ω—ã–º–∏
    async def save_kline_data(self, symbol: str, kline_data: Dict, is_closed: bool = False):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏"""
        cursor = self.connection.cursor()
        try:
            timestamp_ms = int(kline_data['start'])
            open_price = float(kline_data['open'])
            high_price = float(kline_data['high'])
            low_price = float(kline_data['low'])
            close_price = float(kline_data['close'])
            volume = float(kline_data['volume'])
            is_long = close_price > open_price

            if is_closed:
                # –î–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute("""
                    INSERT INTO kline_data (symbol, timestamp_ms, open_price, high_price, 
                                          low_price, close_price, volume, is_closed, is_long)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                    ON CONFLICT (symbol, timestamp_ms) DO UPDATE SET
                        open_price = EXCLUDED.open_price,
                        high_price = EXCLUDED.high_price,
                        low_price = EXCLUDED.low_price,
                        close_price = EXCLUDED.close_price,
                        volume = EXCLUDED.volume,
                        is_closed = EXCLUDED.is_closed,
                        is_long = EXCLUDED.is_long
                """, (symbol, timestamp_ms, open_price, high_price, low_price, 
                     close_price, volume, is_closed, is_long))
            else:
                # –î–ª—è –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute("""
                    INSERT INTO streaming_data (symbol, timestamp_ms, open_price, high_price,
                                              low_price, close_price, volume)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                    ON CONFLICT (symbol, timestamp_ms) DO UPDATE SET
                        open_price = EXCLUDED.open_price,
                        high_price = EXCLUDED.high_price,
                        low_price = EXCLUDED.low_price,
                        close_price = EXCLUDED.close_price,
                        volume = EXCLUDED.volume,
                        updated_at = NOW()
                """, (symbol, timestamp_ms, open_price, high_price, low_price, close_price, volume))

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è kline –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {type(e).__name__}: {str(e)}")
            raise
        finally:
            cursor.close()

    async def save_historical_kline_data(self, symbol: str, kline_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏"""
        await self.save_kline_data(symbol, kline_data, is_closed=True)

    async def check_candle_exists(self, symbol: str, timestamp_ms: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–∏"""
        cursor = self.connection.cursor()
        try:
            cursor.execute("""
                SELECT 1 FROM kline_data 
                WHERE symbol = %s AND timestamp_ms = %s
            """, (symbol, timestamp_ms))
            return cursor.fetchone() is not None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–∏: {type(e).__name__}: {str(e)}")
            return False
        finally:
            cursor.close()

    async def get_recent_candles(self, symbol: str, count: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        cursor = self.connection.cursor(cursor_factory=RealDictCursor)
        try:
            cursor.execute("""
                SELECT timestamp_ms as timestamp, open_price as open, high_price as high,
                       low_price as low, close_price as close, volume, is_long, is_closed
                FROM kline_data 
                WHERE symbol = %s AND is_closed = TRUE
                ORDER BY timestamp_ms DESC 
                LIMIT %s
            """, (symbol, count))
            
            candles = []
            for row in cursor.fetchall():
                candles.append({
                    'timestamp': row['timestamp'],
                    'open': float(row['open']),
                    'high': float(row['high']),
                    'low': float(row['low']),
                    'close': float(row['close']),
                    'volume': float(row['volume']),
                    'is_long': row['is_long'],
                    'is_closed': row['is_closed']
                })
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            return list(reversed(candles))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {type(e).__name__}: {str(e)}")
            return []
        finally:
            cursor.close()

    async def get_streaming_candles(self, symbol: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        cursor = self.connection.cursor(cursor_factory=RealDictCursor)
        try:
            if symbol:
                cursor.execute("""
                    SELECT symbol, timestamp_ms, open_price, high_price, low_price, 
                           close_price, volume, updated_at
                    FROM streaming_data 
                    WHERE symbol = %s
                    ORDER BY timestamp_ms DESC
                """, (symbol,))
            else:
                cursor.execute("""
                    SELECT symbol, timestamp_ms, open_price, high_price, low_price, 
                           close_price, volume, updated_at
                    FROM streaming_data 
                    ORDER BY symbol, timestamp_ms DESC
                """)
            
            return [dict(row) for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {type(e).__name__}: {str(e)}")
            return []
        finally:
            cursor.close()

    async def check_data_integrity(self, symbol: str, hours: int) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        cursor = self.connection.cursor()
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            end_time_ms = int(datetime.utcnow().timestamp() * 1000)
            start_time_ms = end_time_ms - (hours * 60 * 60 * 1000)
            
            # –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            expected_count = hours * 60
            
            # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            cursor.execute("""
                SELECT COUNT(*) FROM kline_data 
                WHERE symbol = %s AND timestamp_ms >= %s AND timestamp_ms < %s
                AND is_closed = TRUE
            """, (symbol, start_time_ms, end_time_ms))
            
            result = cursor.fetchone()
            actual_count = result[0] if result else 0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
            integrity_percentage = (actual_count / expected_count * 100) if expected_count > 0 else 0
            missing_count = max(0, expected_count - actual_count)
            
            return {
                'total_expected': expected_count,
                'total_existing': actual_count,
                'missing_count': missing_count,
                'integrity_percentage': integrity_percentage
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {type(e).__name__}: {str(e)}")
            return {
                'total_expected': 0,
                'total_existing': 0,
                'missing_count': 0,
                'integrity_percentage': 0
            }
        finally:
            cursor.close()

    async def check_data_integrity_range(self, symbol: str, start_time_ms: int, end_time_ms: int) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        cursor = self.connection.cursor()
        try:
            # –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (–≤ –º–∏–Ω—É—Ç–∞—Ö)
            expected_count = (end_time_ms - start_time_ms) // 60000
            
            # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            cursor.execute("""
                SELECT COUNT(*) FROM kline_data 
                WHERE symbol = %s AND timestamp_ms >= %s AND timestamp_ms < %s
                AND is_closed = TRUE
            """, (symbol, start_time_ms, end_time_ms))
            
            result = cursor.fetchone()
            actual_count = result[0] if result else 0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
            integrity_percentage = (actual_count / expected_count * 100) if expected_count > 0 else 0
            missing_count = max(0, expected_count - actual_count)
            
            return {
                'total_expected': expected_count,
                'total_existing': actual_count,
                'missing_count': missing_count,
                'integrity_percentage': integrity_percentage
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–ª—è {symbol}: {type(e).__name__}: {str(e)}")
            return {
                'total_expected': 0,
                'total_existing': 0,
                'missing_count': 0,
                'integrity_percentage': 0
            }
        finally:
            cursor.close()

    async def cleanup_old_candles(self, symbol: str, hours: int):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–≤–µ—á–∏"""
        cursor = self.connection.cursor()
        try:
            cutoff_time_ms = int((datetime.utcnow() - timedelta(hours=hours)).timestamp() * 1000)
            
            cursor.execute("""
                DELETE FROM kline_data 
                WHERE symbol = %s AND timestamp_ms < %s
            """, (symbol, cutoff_time_ms))
            
            deleted_count = cursor.rowcount
            if deleted_count > 0:
                logger.debug(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {type(e).__name__}: {str(e)}")
        finally:
            cursor.close()

    async def cleanup_old_candles_before_time(self, symbol: str, before_time_ms: int) -> int:
        """–£–¥–∞–ª–∏—Ç—å —Å–≤–µ—á–∏ –î–û —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        cursor = self.connection.cursor()
        try:
            cursor.execute("""
                DELETE FROM kline_data 
                WHERE symbol = %s AND timestamp_ms < %s
            """, (symbol, before_time_ms))
            
            deleted_count = cursor.rowcount
            return deleted_count
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {type(e).__name__}: {str(e)}")
            return 0
        finally:
            cursor.close()

    async def cleanup_future_candles_after_time(self, symbol: str, after_time_ms: int) -> int:
        """–£–¥–∞–ª–∏—Ç—å —Å–≤–µ—á–∏ –ü–û–°–õ–ï —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        cursor = self.connection.cursor()
        try:
            cursor.execute("""
                DELETE FROM kline_data 
                WHERE symbol = %s AND timestamp_ms >= %s
            """, (symbol, after_time_ms))
            
            deleted_count = cursor.rowcount
            return deleted_count
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {type(e).__name__}: {str(e)}")
            return 0
        finally:
            cursor.close()

    async def cleanup_old_data(self, hours: int):
        """–û–±—â–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        cursor = self.connection.cursor()
        try:
            cutoff_time_ms = int((datetime.utcnow() - timedelta(hours=hours)).timestamp() * 1000)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ kline –¥–∞–Ω–Ω—ã–µ
            cursor.execute("DELETE FROM kline_data WHERE timestamp_ms < %s", (cutoff_time_ms,))
            kline_deleted = cursor.rowcount
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute("DELETE FROM streaming_data WHERE timestamp_ms < %s", (cutoff_time_ms,))
            streaming_deleted = cursor.rowcount
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
            week_ago_ms = int((datetime.utcnow() - timedelta(days=7)).timestamp() * 1000)
            cursor.execute("DELETE FROM alerts WHERE alert_timestamp_ms < %s", (week_ago_ms,))
            alerts_deleted = cursor.rowcount
            
            logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞: kline={kline_deleted}, streaming={streaming_deleted}, alerts={alerts_deleted}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—â–µ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {type(e).__name__}: {str(e)}")
        finally:
            cursor.close()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–º–∞–º–∏
    async def get_historical_long_volumes(self, symbol: str, hours: int, 
                                        offset_minutes: int = 0, volume_type: str = 'long') -> List[float]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–º—ã LONG —Å–≤–µ—á–µ–π"""
        cursor = self.connection.cursor()
        try:
            end_time_ms = int(datetime.utcnow().timestamp() * 1000) - (offset_minutes * 60 * 1000)
            start_time_ms = end_time_ms - (hours * 60 * 60 * 1000)
            
            if volume_type == 'long':
                cursor.execute("""
                    SELECT volume * close_price as volume_usdt
                    FROM kline_data 
                    WHERE symbol = %s 
                    AND timestamp_ms >= %s AND timestamp_ms < %s
                    AND is_closed = TRUE AND is_long = TRUE
                    ORDER BY timestamp_ms
                """, (symbol, start_time_ms, end_time_ms))
            else:
                cursor.execute("""
                    SELECT volume * close_price as volume_usdt
                    FROM kline_data 
                    WHERE symbol = %s 
                    AND timestamp_ms >= %s AND timestamp_ms < %s
                    AND is_closed = TRUE
                    ORDER BY timestamp_ms
                """, (symbol, start_time_ms, end_time_ms))
            
            return [float(row[0]) for row in cursor.fetchall()]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–ª—è {symbol}: {type(e).__name__}: {str(e)}")
            return []
        finally:
            cursor.close()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–ª–µ—Ä—Ç–∞–º–∏
    async def save_alert(self, alert_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–ª–µ—Ä—Ç"""
        cursor = self.connection.cursor()
        try:
            cursor.execute("""
                INSERT INTO alerts (
                    symbol, alert_type, price, volume_ratio, current_volume_usdt,
                    average_volume_usdt, consecutive_count, alert_timestamp_ms,
                    close_timestamp_ms, is_closed, is_true_signal, has_imbalance,
                    imbalance_data, candle_data, order_book_snapshot, message
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                RETURNING id
            """, (
                alert_data['symbol'],
                alert_data['alert_type'],
                alert_data['price'],
                alert_data.get('volume_ratio'),
                alert_data.get('current_volume_usdt'),
                alert_data.get('average_volume_usdt'),
                alert_data.get('consecutive_count'),
                alert_data['timestamp'],
                alert_data.get('close_timestamp'),
                alert_data.get('is_closed', False),
                alert_data.get('is_true_signal'),
                alert_data.get('has_imbalance', False),
                json.dumps(alert_data.get('imbalance_data')) if alert_data.get('imbalance_data') else None,
                json.dumps(alert_data.get('candle_data')) if alert_data.get('candle_data') else None,
                json.dumps(alert_data.get('order_book_snapshot')) if alert_data.get('order_book_snapshot') else None,
                alert_data.get('message')
            ))
            
            result = cursor.fetchone()
            alert_id = result[0] if result else None
            return alert_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {type(e).__name__}: {str(e)}")
            return None
        finally:
            cursor.close()

    async def get_all_alerts(self, limit: int = 100) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–ª–µ—Ä—Ç—ã"""
        cursor = self.connection.cursor(cursor_factory=RealDictCursor)
        try:
            cursor.execute("""
                SELECT * FROM alerts 
                ORDER BY alert_timestamp_ms DESC 
                LIMIT %s
            """, (limit,))
            
            all_alerts = [dict(row) for row in cursor.fetchall()]
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
            volume_alerts = [a for a in all_alerts if a['alert_type'] == 'volume_spike']
            consecutive_alerts = [a for a in all_alerts if a['alert_type'] == 'consecutive_long']
            priority_alerts = [a for a in all_alerts if a['alert_type'] == 'priority']
            
            return {
                'alerts': all_alerts,
                'volume_alerts': volume_alerts,
                'consecutive_alerts': consecutive_alerts,
                'priority_alerts': priority_alerts
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {type(e).__name__}: {str(e)}")
            return {'alerts': [], 'volume_alerts': [], 'consecutive_alerts': [], 'priority_alerts': []}
        finally:
            cursor.close()

    async def get_alerts_by_type(self, alert_type: str, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –ø–æ —Ç–∏–ø—É"""
        cursor = self.connection.cursor(cursor_factory=RealDictCursor)
        try:
            cursor.execute("""
                SELECT * FROM alerts 
                WHERE alert_type = %s
                ORDER BY alert_timestamp_ms DESC 
                LIMIT %s
            """, (alert_type, limit))
            
            return [dict(row) for row in cursor.fetchall()]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ —Ç–∏–ø—É {alert_type}: {type(e).__name__}: {str(e)}")
            return []
        finally:
            cursor.close()

    async def clear_alerts(self, alert_type: str):
        """–û—á–∏—Å—Ç–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –ø–æ —Ç–∏–ø—É"""
        cursor = self.connection.cursor()
        try:
            cursor.execute("DELETE FROM alerts WHERE alert_type = %s", (alert_type,))
            deleted_count = cursor.rowcount
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∞–ª–µ—Ä—Ç–æ–≤ —Ç–∏–ø–∞ {alert_type}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ —Ç–∏–ø–∞ {alert_type}: {type(e).__name__}: {str(e)}")
            raise
        finally:
            cursor.close()

    async def get_recent_volume_alerts(self, symbol: str, minutes_back: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –æ–±—ä–µ–º–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"""
        cursor = self.connection.cursor(cursor_factory=RealDictCursor)
        try:
            cutoff_time_ms = int((datetime.utcnow() - timedelta(minutes=minutes_back)).timestamp() * 1000)
            
            cursor.execute("""
                SELECT * FROM alerts 
                WHERE symbol = %s AND alert_type = 'volume_spike'
                AND alert_timestamp_ms >= %s
                ORDER BY alert_timestamp_ms DESC
            """, (symbol, cutoff_time_ms))
            
            return [dict(row) for row in cursor.fetchall()]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ–±—ä–µ–º–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è {symbol}: {type(e).__name__}: {str(e)}")
            return []
        finally:
            cursor.close()

    async def get_chart_data(self, symbol: str, hours: int = 1, alert_time: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
        cursor = self.connection.cursor(cursor_factory=RealDictCursor)
        try:
            if alert_time:
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –∞–ª–µ—Ä—Ç–∞, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ
                alert_timestamp = datetime.fromisoformat(alert_time.replace('Z', '+00:00'))
                center_time_ms = int(alert_timestamp.timestamp() * 1000)
                start_time_ms = center_time_ms - (hours * 30 * 60 * 1000)  # 30 –º–∏–Ω—É—Ç –¥–æ
                end_time_ms = center_time_ms + (hours * 30 * 60 * 1000)    # 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ
            else:
                # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
                end_time_ms = int(datetime.utcnow().timestamp() * 1000)
                start_time_ms = end_time_ms - (hours * 60 * 60 * 1000)
            
            cursor.execute("""
                SELECT timestamp_ms as timestamp, open_price as open, high_price as high,
                       low_price as low, close_price as close, volume
                FROM kline_data 
                WHERE symbol = %s AND timestamp_ms >= %s AND timestamp_ms <= %s
                AND is_closed = TRUE
                ORDER BY timestamp_ms
            """, (symbol, start_time_ms, end_time_ms))
            
            chart_data = []
            for row in cursor.fetchall():
                chart_data.append({
                    'timestamp': row['timestamp'],
                    'open': float(row['open']),
                    'high': float(row['high']),
                    'low': float(row['low']),
                    'close': float(row['close']),
                    'volume': float(row['volume'])
                })
            
            return chart_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}: {type(e).__name__}: {str(e)}")
            return []
        finally:
            cursor.close()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º
    async def get_favorites(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä"""
        cursor = self.connection.cursor(cursor_factory=RealDictCursor)
        try:
            cursor.execute("""
                SELECT symbol, notes, color, sort_order, created_at, updated_at
                FROM favorites 
                ORDER BY sort_order, symbol
            """)
            return [dict(row) for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {type(e).__name__}: {str(e)}")
            return []
        finally:
            cursor.close()

    async def add_to_favorites(self, symbol: str, notes: str = None, color: str = '#FFD700'):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        cursor = self.connection.cursor()
        try:
            cursor.execute("""
                INSERT INTO favorites (symbol, notes, color)
                VALUES (%s, %s, %s)
                ON CONFLICT (symbol) DO UPDATE SET
                    notes = EXCLUDED.notes,
                    color = EXCLUDED.color,
                    updated_at = NOW()
            """, (symbol, notes, color))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {symbol} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {type(e).__name__}: {str(e)}")
            raise
        finally:
            cursor.close()

    async def remove_from_favorites(self, symbol: str):
        """–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        cursor = self.connection.cursor()
        try:
            cursor.execute("DELETE FROM favorites WHERE symbol = %s", (symbol,))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {symbol} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {type(e).__name__}: {str(e)}")
            raise
        finally:
            cursor.close()

    async def update_favorite(self, symbol: str, notes: str = None, color: str = None, sort_order: int = None):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É"""
        cursor = self.connection.cursor()
        try:
            updates = []
            params = []
            
            if notes is not None:
                updates.append("notes = %s")
                params.append(notes)
            if color is not None:
                updates.append("color = %s")
                params.append(color)
            if sort_order is not None:
                updates.append("sort_order = %s")
                params.append(sort_order)
            
            if updates:
                updates.append("updated_at = NOW()")
                params.append(symbol)
                
                query = f"UPDATE favorites SET {', '.join(updates)} WHERE symbol = %s"
                cursor.execute(query, params)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã {symbol}: {type(e).__name__}: {str(e)}")
            raise
        finally:
            cursor.close()

    async def reorder_favorites(self, symbol_order: List[str]):
        """–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä"""
        cursor = self.connection.cursor()
        try:
            for i, symbol in enumerate(symbol_order):
                cursor.execute("""
                    UPDATE favorites SET sort_order = %s, updated_at = NOW()
                    WHERE symbol = %s
                """, (i, symbol))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä: {type(e).__name__}: {str(e)}")
            raise
        finally:
            cursor.close()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    async def get_trading_settings(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        cursor = self.connection.cursor(cursor_factory=RealDictCursor)
        try:
            cursor.execute("SELECT * FROM trading_settings WHERE id = 1")
            row = cursor.fetchone()
            return dict(row) if row else {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏: {type(e).__name__}: {str(e)}")
            return {}
        finally:
            cursor.close()

    async def update_trading_settings(self, settings: Dict):
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        cursor = self.connection.cursor()
        try:
            updates = []
            params = []
            
            for key, value in settings.items():
                updates.append(f"{key} = %s")
                params.append(value)
            
            if updates:
                updates.append("updated_at = NOW()")
                query = f"UPDATE trading_settings SET {', '.join(updates)} WHERE id = 1"
                cursor.execute(query, params)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏: {type(e).__name__}: {str(e)}")
            raise
        finally:
            cursor.close()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –±—É–º–∞–∂–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    async def create_paper_trade(self, trade_data: Dict) -> int:
        """–°–æ–∑–¥–∞—Ç—å –±—É–º–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É"""
        cursor = self.connection.cursor()
        try:
            cursor.execute("""
                INSERT INTO paper_trades (
                    symbol, trade_type, entry_price, quantity, stop_loss, take_profit,
                    risk_amount, risk_percentage, potential_profit, potential_loss,
                    risk_reward_ratio, notes, alert_id
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                RETURNING id
            """, (
                trade_data['symbol'],
                trade_data['trade_type'],
                trade_data['entry_price'],
                trade_data['quantity'],
                trade_data.get('stop_loss'),
                trade_data.get('take_profit'),
                trade_data.get('risk_amount'),
                trade_data.get('risk_percentage'),
                trade_data.get('potential_profit'),
                trade_data.get('potential_loss'),
                trade_data.get('risk_reward_ratio'),
                trade_data.get('notes'),
                trade_data.get('alert_id')
            ))
            
            result = cursor.fetchone()
            return result[0] if result else None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—É–º–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏: {type(e).__name__}: {str(e)}")
            return None
        finally:
            cursor.close()

    async def get_paper_trades(self, status: str = None, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –±—É–º–∞–∂–Ω—ã–µ —Å–¥–µ–ª–∫–∏"""
        cursor = self.connection.cursor(cursor_factory=RealDictCursor)
        try:
            if status:
                cursor.execute("""
                    SELECT * FROM paper_trades 
                    WHERE status = %s
                    ORDER BY entry_time DESC 
                    LIMIT %s
                """, (status, limit))
            else:
                cursor.execute("""
                    SELECT * FROM paper_trades 
                    ORDER BY entry_time DESC 
                    LIMIT %s
                """, (limit,))
            
            return [dict(row) for row in cursor.fetchall()]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–º–∞–∂–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {type(e).__name__}: {str(e)}")
            return []
        finally:
            cursor.close()

    async def close_paper_trade(self, trade_id: int, exit_price: float, exit_reason: str = 'MANUAL') -> bool:
        """–ó–∞–∫—Ä—ã—Ç—å –±—É–º–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É"""
        cursor = self.connection.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
            cursor.execute("""
                SELECT trade_type, entry_price, quantity 
                FROM paper_trades 
                WHERE id = %s AND status = 'OPEN'
            """, (trade_id,))
            
            trade = cursor.fetchone()
            if not trade:
                return False
            
            trade_type, entry_price, quantity = trade
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
            if trade_type == 'LONG':
                profit_loss = (exit_price - entry_price) * quantity
            else:  # SHORT
                profit_loss = (entry_price - exit_price) * quantity
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É
            cursor.execute("""
                UPDATE paper_trades 
                SET exit_price = %s, exit_reason = %s, actual_profit_loss = %s,
                    status = 'CLOSED', exit_time = NOW()
                WHERE id = %s
            """, (exit_price, exit_reason, profit_loss, trade_id))
            
            return cursor.rowcount > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—É–º–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏ {trade_id}: {type(e).__name__}: {str(e)}")
            return False
        finally:
            cursor.close()

    async def get_trading_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        cursor = self.connection.cursor()
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_trades,
                    COUNT(*) FILTER (WHERE status = 'OPEN') as open_trades,
                    COUNT(*) FILTER (WHERE status = 'CLOSED') as closed_trades,
                    COUNT(*) FILTER (WHERE status = 'CLOSED' AND actual_profit_loss > 0) as winning_trades,
                    COUNT(*) FILTER (WHERE status = 'CLOSED' AND actual_profit_loss < 0) as losing_trades,
                    COALESCE(SUM(actual_profit_loss) FILTER (WHERE status = 'CLOSED'), 0) as total_pnl,
                    COALESCE(AVG(actual_profit_loss) FILTER (WHERE status = 'CLOSED'), 0) as avg_pnl,
                    COALESCE(MAX(actual_profit_loss) FILTER (WHERE status = 'CLOSED'), 0) as max_profit,
                    COALESCE(MIN(actual_profit_loss) FILTER (WHERE status = 'CLOSED'), 0) as max_loss
                FROM paper_trades
            """)
            
            stats = cursor.fetchone()
            
            total_trades, open_trades, closed_trades, winning_trades, losing_trades, \
            total_pnl, avg_pnl, max_profit, max_loss = stats
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            win_rate = (winning_trades / closed_trades * 100) if closed_trades > 0 else 0
            
            return {
                'total_trades': total_trades,
                'open_trades': open_trades,
                'closed_trades': closed_trades,
                'winning_trades': winning_trades,
                'losing_trades': losing_trades,
                'win_rate': round(win_rate, 2),
                'total_pnl': float(total_pnl),
                'avg_pnl': float(avg_pnl),
                'max_profit': float(max_profit),
                'max_loss': float(max_loss)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {type(e).__name__}: {str(e)}")
            return {}
        finally:
            cursor.close()

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            self.connection.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")