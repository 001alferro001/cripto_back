import asyncio
import json
import logging
import websockets
from typing import List, Dict, Optional, Set
import requests
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


class BybitWebSocketClient:
    def __init__(self, trading_pairs: List[str], alert_manager, connection_manager):
        self.trading_pairs = set()  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
        self.alert_manager = alert_manager
        self.connection_manager = connection_manager
        self.websocket = None
        self.is_running = False
        self.ping_task = None
        self.subscription_update_task = None
        self.last_message_time = None
        self.websocket_connected = False  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

        # Bybit WebSocket URLs
        self.ws_url = "wss://stream.bybit.com/v5/public/linear"
        self.rest_url = "https://api.bybit.com"

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_interval = alert_manager.settings.get('update_interval_seconds', 1)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.messages_received = 0
        self.last_stats_log = datetime.utcnow()

        # –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
        self.processed_candles = {}  # symbol -> last_processed_timestamp

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
        self.subscribed_pairs = set()  # –ü–∞—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã
        self.subscription_pending = set()  # –ü–∞—Ä—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        self.last_subscription_update = datetime.utcnow()

        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.data_loading_complete = False
        self.initial_subscription_complete = False
        self.streaming_active = False  # –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–∞

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 10
        self.reconnect_delay = 5  # —Å–µ–∫—É–Ω–¥
        self.connection_stable_time = 60  # —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—á–∏—Ç–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º

        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        self.data_load_cooldown = 3600  # 1 —á–∞—Å –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        self.last_data_load_time = {}  # symbol -> timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        self.last_integrity_check = {}  # symbol -> timestamp
        self.integrity_check_interval = 1800  # 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞–Ω–Ω—ã—Ö
        self.data_range_manager_task = None
        self.data_range_check_interval = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        self.min_integrity_for_skip = 85  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ–≤—ã—à–µ–Ω–æ —Å 90)
        self.min_candles_for_skip = 30   # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (—Å–Ω–∏–∂–µ–Ω–æ —Å 50)
        self.max_data_age_hours = 6      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —á–∞—Å–∞—Ö

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.last_stream_data = {}  # symbol -> timestamp –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.stream_timeout_seconds = 300  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (5 –º–∏–Ω—É—Ç)
        self.stream_monitor_task = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.pair_statistics = {}  # symbol -> stats
        self.failed_subscriptions = set()  # –ü–∞—Ä—ã —Å –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        self.subscription_retry_manager_task = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å—é"""
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")

        try:
            # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            logger.info("üìã –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
            await self._load_trading_pairs()

            # –®–∞–≥ 2: –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä –®–∞–≥ 2: –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            await self._smart_check_and_load_historical_data()

            # –®–∞–≥ 3: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –ø–∞—Ä—ã
            logger.info("üîå –®–∞–≥ 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞—Ä—ã...")
            await self._connect_and_subscribe()

            # –®–∞–≥ 4: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
            logger.info("‚öôÔ∏è –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á...")
            await self._start_periodic_tasks()

            # –®–∞–≥ 5: –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info("üì° –®–∞–≥ 5: –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            await self._start_stream_monitoring()

            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise

    async def _load_trading_pairs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            current_pairs = await self.alert_manager.db_manager.get_watchlist()
            self.trading_pairs = set(current_pairs)
            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.trading_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

            if len(self.trading_pairs) == 0:
                logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø—É—Å—Ç. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä.")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            raise

    async def _smart_check_and_load_historical_data(self):
        """–£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        if not self.trading_pairs:
            logger.info("üìä –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            self.data_loading_complete = True
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            retention_hours = self.alert_manager.settings.get('data_retention_hours', 2)
            analysis_hours = self.alert_manager.settings.get('analysis_hours', 1)
            total_hours_needed = retention_hours + analysis_hours + 1  # +1 —á–∞—Å –±—É—Ñ–µ—Ä–∞

            logger.info(f"üìä –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(self.trading_pairs)} –ø–∞—Ä (—Ç—Ä–µ–±—É–µ—Ç—Å—è: {total_hours_needed}—á)")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            pairs_analysis = await self._smart_analyze_pairs_data_status(total_hours_needed)
            
            pairs_to_load = pairs_analysis['needs_loading']
            pairs_with_data = pairs_analysis['has_data']
            pairs_partial = pairs_analysis['partial_data']
            pairs_outdated = pairs_analysis['outdated_data']

            logger.info(f"üìä –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:")
            logger.info(f"  ‚úÖ –ü–∞—Ä—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {len(pairs_with_data)}")
            logger.info(f"  üîÑ –ü–∞—Ä—ã —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {len(pairs_partial)}")
            logger.info(f"  ‚è∞ –ü–∞—Ä—ã —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {len(pairs_outdated)}")
            logger.info(f"  üì• –ü–∞—Ä—ã —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {len(pairs_to_load)}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä, –∫–æ—Ç–æ—Ä—ã–º —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ
            if pairs_to_load:
                logger.info(f"üìä –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(pairs_to_load)} –ø–∞—Ä...")
                await self._load_data_for_pairs(pairs_to_load, total_hours_needed, load_type="full")
            
            # –î–ª—è –ø–∞—Ä —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ - –¥–æ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ
            if pairs_partial:
                logger.info(f"üìä –î–æ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(pairs_partial)} –ø–∞—Ä —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
                await self._load_data_for_pairs(pairs_partial, total_hours_needed, load_type="partial")
            
            # –î–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–≤–µ—á–∏
            if pairs_outdated:
                logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(pairs_outdated)} –ø–∞—Ä —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
                await self._update_recent_data_for_pairs(pairs_outdated)

            # –ï—Å–ª–∏ –≤—Å–µ –ø–∞—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            if not pairs_to_load and not pairs_partial and not pairs_outdated:
                logger.info("‚úÖ –í—Å–µ –ø–∞—Ä—ã –∏–º–µ—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

            self.data_loading_complete = True
            logger.info("‚úÖ –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ—Ç–æ–∫–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
            await self.connection_manager.broadcast_json({
                "type": "historical_data_loaded",
                "pairs_count": len(self.trading_pairs),
                "pairs_with_data": len(pairs_with_data),
                "pairs_loaded": len(pairs_to_load),
                "pairs_updated": len(pairs_partial) + len(pairs_outdated),
                "ready_for_streaming": True,
                "timestamp": datetime.utcnow().isoformat()
            })

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    async def _smart_analyze_pairs_data_status(self, hours_needed: int) -> Dict:
        """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        pairs_with_data = []
        pairs_partial_data = []
        pairs_need_loading = []
        pairs_outdated_data = []

        current_time = datetime.utcnow()
        current_time_ms = int(current_time.timestamp() * 1000)

        for symbol in self.trading_pairs:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∑–∞–≥—Ä—É–∂–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                last_load_time = self.last_data_load_time.get(symbol)
                if last_load_time:
                    time_since_load = (current_time_ms - last_load_time) / 1000  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    if time_since_load < self.data_load_cooldown:
                        logger.debug(f"üìä {symbol}: –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å {time_since_load/60:.1f} –º–∏–Ω –Ω–∞–∑–∞–¥")
                        pairs_with_data.append(symbol)
                        continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                integrity_info = await self.alert_manager.db_manager.check_data_integrity(
                    symbol, hours_needed
                )

                total_existing = integrity_info.get('total_existing', 0)
                integrity_percentage = integrity_info.get('integrity_percentage', 0)
                expected_count = integrity_info.get('total_expected', hours_needed * 60)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö
                latest_candle_time = await self._get_latest_candle_time(symbol)
                data_age_hours = 0
                if latest_candle_time:
                    data_age_hours = (current_time_ms - latest_candle_time) / (1000 * 60 * 60)

                logger.debug(f"üìä {symbol}: {total_existing}/{expected_count} —Å–≤–µ—á–µ–π ({integrity_percentage:.1f}%), –≤–æ–∑—Ä–∞—Å—Ç: {data_age_hours:.1f}—á")

                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
                if (integrity_percentage >= self.min_integrity_for_skip and 
                    total_existing >= self.min_candles_for_skip and
                    data_age_hours <= self.max_data_age_hours):
                    pairs_with_data.append(symbol)
                    logger.debug(f"‚úÖ {symbol}: –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã")
                    
                elif (total_existing >= 20 and 
                      integrity_percentage >= 60 and 
                      data_age_hours <= self.max_data_age_hours):
                    pairs_partial_data.append(symbol)
                    logger.debug(f"üîÑ {symbol}: –ß–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–∑–∞–≥—Ä—É–∑–∫–∞")
                    
                elif (total_existing >= self.min_candles_for_skip and 
                      data_age_hours > self.max_data_age_hours):
                    pairs_outdated_data.append(symbol)
                    logger.debug(f"‚è∞ {symbol}: –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                    
                else:
                    pairs_need_loading.append(symbol)
                    logger.debug(f"üì• {symbol}: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                pairs_need_loading.append(symbol)

        return {
            'has_data': pairs_with_data,
            'partial_data': pairs_partial_data,
            'needs_loading': pairs_need_loading,
            'outdated_data': pairs_outdated_data
        }

    async def _get_latest_candle_time(self, symbol: str) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            cursor = self.alert_manager.db_manager.connection.cursor()
            cursor.execute("""
                SELECT MAX(timestamp_ms) FROM kline_data 
                WHERE symbol = %s AND is_closed = TRUE
            """, (symbol,))
            
            result = cursor.fetchone()
            cursor.close()
            
            return result[0] if result and result[0] else None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ –¥–ª—è {symbol}: {e}")
            return None

    async def _update_recent_data_for_pairs(self, pairs: List[str]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        if not pairs:
            return

        logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(pairs)} –ø–∞—Ä...")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞–º–∏
        batch_size = 10
        
        for i in range(0, len(pairs), batch_size):
            batch = pairs[i:i + batch_size]
            logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ {i // batch_size + 1}: {len(batch)} –ø–∞—Ä")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—ã –≤ –ø–∞–∫–µ—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [self._update_recent_symbol_data(symbol) for symbol in batch]
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for j, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {batch[j]}: {result}")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            if i + batch_size < len(pairs):
                await asyncio.sleep(0.5)

        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    async def _update_recent_symbol_data(self, symbol: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
            latest_candle_time = await self._get_latest_candle_time(symbol)
            
            if not latest_candle_time:
                logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                return

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            current_time_ms = int(datetime.utcnow().timestamp() * 1000)
            start_time_ms = latest_candle_time
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä (1 —á–∞—Å –Ω–∞–∑–∞–¥ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏)
            start_time_ms = max(start_time_ms - (60 * 60 * 1000), 
                               current_time_ms - (6 * 60 * 60 * 1000))  # –ú–∞–∫—Å–∏–º—É–º 6 —á–∞—Å–æ–≤

            logger.debug(f"üìä {symbol}: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å {datetime.utcfromtimestamp(start_time_ms/1000)} –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            success = await self._load_full_period(symbol, start_time_ms, current_time_ms)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
                self.last_data_load_time[symbol] = current_time_ms
                logger.debug(f"‚úÖ –ù–µ–¥–∞–≤–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")

    async def _load_data_for_pairs(self, pairs: List[str], hours: int, load_type: str = "full"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        if not pairs:
            return

        action = f"{load_type.capitalize()} –∑–∞–≥—Ä—É–∑–∫–∞"
        logger.info(f"üìä {action} –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(pairs)} –ø–∞—Ä...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ API
        batch_size = 8 if load_type == "partial" else 10
        
        for i in range(0, len(pairs), batch_size):
            batch = pairs[i:i + batch_size]
            logger.info(f"üìä {action} –ø–∞–∫–µ—Ç–∞ {i // batch_size + 1}: {len(batch)} –ø–∞—Ä")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—ã –≤ –ø–∞–∫–µ—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [self._load_symbol_data(symbol, hours, force_load=(load_type == "full")) for symbol in batch]
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for j, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {batch[j]}: {result}")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            if i + batch_size < len(pairs):
                await asyncio.sleep(0.5 if load_type == "partial" else 1)

        logger.info(f"‚úÖ {action} –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def _load_symbol_data(self, symbol: str, hours: int, force_load: bool = False):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—ç—à–∞"""
        try:
            current_time = datetime.utcnow()
            current_time_ms = int(current_time.timestamp() * 1000)

            # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞
            if not force_load:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
                last_load_time = self.last_data_load_time.get(symbol)
                if last_load_time:
                    time_since_load = (current_time_ms - last_load_time) / 1000  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    if time_since_load < self.data_load_cooldown:
                        logger.debug(f"üìä {symbol}: –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å {time_since_load/60:.1f} –º–∏–Ω –Ω–∞–∑–∞–¥")
                        return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                integrity_info = await self.alert_manager.db_manager.check_data_integrity(symbol, hours)
                
                if (integrity_info.get('integrity_percentage', 0) >= self.min_integrity_for_skip and
                    integrity_info.get('total_existing', 0) >= self.min_candles_for_skip):
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö
                    latest_candle_time = await self._get_latest_candle_time(symbol)
                    if latest_candle_time:
                        data_age_hours = (current_time_ms - latest_candle_time) / (1000 * 60 * 60)
                        if data_age_hours <= self.max_data_age_hours:
                            logger.debug(f"üìä {symbol}: –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ - –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã (–≤–æ–∑—Ä–∞—Å—Ç: {data_age_hours:.1f}—á)")
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π "–∑–∞–≥—Ä—É–∑–∫–∏" —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–Ω–æ–≤–∞
                            self.last_data_load_time[symbol] = current_time_ms
                            return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∑–∞–ø–∞—Å–æ–º
            end_time_ms = current_time_ms
            start_time_ms = end_time_ms - (hours * 60 * 60 * 1000)

            logger.info(f"üìä {symbol}: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {hours} —á–∞—Å–æ–≤ ({(end_time_ms - start_time_ms) // 60000} –º–∏–Ω—É—Ç)")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
            success = await self._load_full_period(symbol, start_time_ms, end_time_ms)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
                self.last_data_load_time[symbol] = current_time_ms
                logger.debug(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                
                # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                await self._maintain_exact_data_range(symbol)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            raise

    async def _load_full_period(self, symbol: str, start_time_ms: int, end_time_ms: int) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            total_loaded = 0
            total_skipped = 0
            current_start = start_time_ms
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç API Bybit –¥–ª—è kline - 1000 —Å–≤–µ—á–µ–π
            max_limit = 1000
            
            while current_start < end_time_ms:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                remaining_minutes = (end_time_ms - current_start) // 60000
                limit = min(remaining_minutes + 10, max_limit)  # +10 –¥–ª—è –∑–∞–ø–∞—Å–∞
                
                if limit <= 0:
                    break

                url = f"{self.rest_url}/v5/market/kline"
                params = {
                    'category': 'linear',
                    'symbol': symbol,
                    'interval': '1',
                    'start': current_start,
                    'end': end_time_ms,
                    'limit': limit
                }

                logger.debug(f"üìä {symbol}: –ó–∞–ø—Ä–æ—Å {limit} —Å–≤–µ—á–µ–π —Å {datetime.utcfromtimestamp(current_start/1000)}")

                response = requests.get(url, params=params, timeout=15)
                
                if response.status_code != 200:
                    logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status_code} –¥–ª—è {symbol}")
                    return False
                    
                data = response.json()

                if data.get('retCode') == 0:
                    klines = data['result']['list']
                    if not klines:
                        logger.debug(f"üìä {symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—É—â–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
                        break
                        
                    # Bybit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ -> —Å—Ç–∞—Ä—ã–µ)
                    klines.reverse()

                    batch_loaded = 0
                    batch_skipped = 0
                    last_timestamp = current_start

                    for kline in klines:
                        try:
                            # –ë–∏—Ä–∂–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                            kline_timestamp_ms = int(kline[0])
                            
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–µ—á–∏ –≤–Ω–µ –Ω–∞—à–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                            if kline_timestamp_ms < start_time_ms or kline_timestamp_ms >= end_time_ms:
                                continue

                            # –î–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –º–∏–Ω—É—Ç
                            rounded_timestamp = (kline_timestamp_ms // 60000) * 60000

                            kline_data = {
                                'start': rounded_timestamp,
                                'end': rounded_timestamp + 60000,
                                'open': float(kline[1]),
                                'high': float(kline[2]),
                                'low': float(kline[3]),
                                'close': float(kline[4]),
                                'volume': float(kline[5]),
                                'confirm': True  # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã—Ç—ã
                            }

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ —Å–≤–µ—á–∞ –≤ –±–∞–∑–µ
                            existing = await self.alert_manager.db_manager.check_candle_exists(symbol, rounded_timestamp)
                            if not existing:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                                await self.alert_manager.db_manager.save_historical_kline_data(symbol, kline_data)
                                batch_loaded += 1
                            else:
                                batch_skipped += 1
                            
                            last_timestamp = max(last_timestamp, kline_timestamp_ms)
                                
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏ –¥–ª—è {symbol}: {e}")
                            continue

                    total_loaded += batch_loaded
                    total_skipped += batch_skipped
                    
                    logger.debug(f"üìä {symbol}: –ü–∞–∫–µ—Ç - –∑–∞–≥—Ä—É–∂–µ–Ω–æ {batch_loaded}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {batch_skipped}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    # –î–æ–±–∞–≤–ª—è–µ–º 1 –º–∏–Ω—É—Ç—É –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å–≤–µ—á–µ
                    current_start = last_timestamp + 60000
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏, –∑–Ω–∞—á–∏—Ç –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞
                    if len(klines) < limit:
                        break
                        
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {data.get('retMsg')}")
                    return False

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.2)

            if total_loaded > 0 or total_skipped > 0:
                logger.info(f"üìä {symbol}: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_loaded} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π, –ø—Ä–æ–ø—É—â–µ–Ω–æ {total_skipped} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö")
            
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è {symbol}: {e}")
            return False

    async def _connect_and_subscribe(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –ø–∞—Ä—ã"""
        if not self.trading_pairs:
            logger.info("üîå –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        asyncio.create_task(self._websocket_connection_loop())

        # –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        max_wait = 30  # –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
        wait_time = 0
        while not self.websocket_connected:
            await asyncio.sleep(1)
            wait_time += 1
            if wait_time >= max_wait:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

        logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –ø–∞—Ä—ã
        max_subscription_wait = 60  # –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
        subscription_wait = 0
        while len(self.subscribed_pairs) < len(self.trading_pairs) and subscription_wait < max_subscription_wait:
            await asyncio.sleep(1)
            subscription_wait += 1
            logger.debug(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞: {len(self.subscribed_pairs)}/{len(self.trading_pairs)} –ø–∞—Ä")

        if len(self.subscribed_pairs) == len(self.trading_pairs):
            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –≤—Å–µ {len(self.subscribed_pairs)} –ø–∞—Ä")
            self.initial_subscription_complete = True
        else:
            logger.warning(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(self.subscribed_pairs)}/{len(self.trading_pairs)} –ø–∞—Ä")

    async def _websocket_connection_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        while self.is_running:
            try:
                await self._connect_websocket()
                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω—ã–º
                self.reconnect_attempts = 0
                
            except Exception as e:
                logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
                self.websocket_connected = False
                self.streaming_active = False
                
                if self.is_running:
                    self.reconnect_attempts += 1
                    
                    if self.reconnect_attempts <= self.max_reconnect_attempts:
                        delay = min(self.reconnect_delay * self.reconnect_attempts, 60)  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
                        logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥... (–ø–æ–ø—ã—Ç–∫–∞ {self.reconnect_attempts}/{self.max_reconnect_attempts})")
                        await asyncio.sleep(delay)
                    else:
                        logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({self.max_reconnect_attempts})")
                        self.is_running = False
                        break

    async def _connect_websocket(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {self.ws_url}")

            # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket
            async with websockets.connect(
                    self.ws_url,
                    ping_interval=20,  # –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª ping
                    ping_timeout=10,   # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç ping
                    close_timeout=10,
                    max_size=10**7,    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
                    compression=None   # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∂–∞—Ç–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            ) as websocket:
                self.websocket = websocket
                self.websocket_connected = True
                self.last_message_time = datetime.utcnow()

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
                self.subscribed_pairs.clear()
                self.subscription_pending.clear()
                self.failed_subscriptions.clear()

                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ kline –¥–∞–Ω–Ω—ã–µ –¥–ª—è –í–°–ï–• —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
                if self.trading_pairs:
                    await self._subscribe_to_pairs(self.trading_pairs)

                logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ {len(self.trading_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await self.connection_manager.broadcast_json({
                    "type": "connection_status",
                    "status": "connected",
                    "pairs_count": len(self.trading_pairs),
                    "subscribed_count": len(self.subscribed_pairs),
                    "pending_count": len(self.subscription_pending),
                    "update_interval": self.update_interval,
                    "streaming_active": True,
                    "timestamp": datetime.utcnow().isoformat()
                })

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                self.ping_task = asyncio.create_task(self._monitor_connection())

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–∞
                self.streaming_active = True

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in websocket:
                    if not self.is_running:
                        break

                    try:
                        self.last_message_time = datetime.utcnow()
                        self.messages_received += 1

                        data = json.loads(message)
                        await self._handle_message(data)

                        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                        if (datetime.utcnow() - self.last_stats_log).total_seconds() > 300:
                            logger.info(
                                f"üìä WebSocket —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.messages_received} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ {len(self.subscribed_pairs)} –ø–∞—Ä")
                            self.last_stats_log = datetime.utcnow()

                    except json.JSONDecodeError as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç WebSocket: {e}")
                        continue
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        continue

        except websockets.exceptions.ConnectionClosedError as e:
            logger.warning(f"‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {e}")
            raise
        except websockets.exceptions.InvalidStatusCode as e:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥ WebSocket: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            raise
        finally:
            self.websocket_connected = False
            self.streaming_active = False
            if self.ping_task:
                self.ping_task.cancel()
                try:
                    await self.ping_task
                except asyncio.CancelledError:
                    pass

    async def _subscribe_to_pairs(self, pairs: Set[str]):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        if not pairs:
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 50 –ø–∞—Ä –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π WebSocket
        batch_size = 50
        pairs_list = list(pairs)

        for i in range(0, len(pairs_list), batch_size):
            batch = pairs_list[i:i + batch_size]
            subscribe_message = {
                "op": "subscribe",
                "args": [f"kline.1.{pair}" for pair in batch]
            }

            try:
                await self.websocket.send(json.dumps(subscribe_message))
                logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞–∫–µ—Ç {i // batch_size + 1}: {len(batch)} –ø–∞—Ä")

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                self.subscription_pending.update(batch)

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–∞—Ä
                for pair in batch:
                    if pair not in self.pair_statistics:
                        self.pair_statistics[pair] = {
                            'messages_count': 0,
                            'last_message_time': None,
                            'subscription_attempts': 0,
                            'subscription_errors': 0,
                            'is_subscribed': False
                        }
                    self.pair_statistics[pair]['subscription_attempts'] += 1

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                if i + batch_size < len(pairs_list):
                    await asyncio.sleep(0.5)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–∞–∫–µ—Ç {i // batch_size + 1}: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—ã –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                self.failed_subscriptions.update(batch)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
                for pair in batch:
                    if pair in self.pair_statistics:
                        self.pair_statistics[pair]['subscription_errors'] += 1
                continue

    async def _start_periodic_tasks(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        # –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
        self.subscription_update_task = asyncio.create_task(self._subscription_updater())

        # –ó–∞–¥–∞—á–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞–Ω–Ω—ã—Ö
        self.data_range_manager_task = asyncio.create_task(self._data_range_manager())

        # –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        asyncio.create_task(self._data_cleanup_task())

        # –ó–∞–¥–∞—á–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
        self.subscription_retry_manager_task = asyncio.create_task(self._subscription_retry_manager())

    async def _subscription_retry_manager(self):
        """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–∞—Ä—ã"""
        while self.is_running:
            try:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

                if not self.is_running or not self.websocket_connected:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                if self.failed_subscriptions:
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {len(self.failed_subscriptions)} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–∞—Ä—ã
                    failed_pairs = self.failed_subscriptions.copy()
                    self.failed_subscriptions.clear()
                    
                    await self._subscribe_to_pairs(failed_pairs)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
                await asyncio.sleep(60)

    async def _start_stream_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.stream_monitor_task = asyncio.create_task(self._stream_monitor())
        logger.info("üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")

    async def _stream_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        while self.is_running:
            try:
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

                if not self.is_running:
                    break

                current_time = datetime.utcnow()
                inactive_pairs = []
                critical_pairs = []

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
                for symbol in self.trading_pairs:
                    last_data_time = self.last_stream_data.get(symbol)
                    
                    if last_data_time:
                        time_since_last = (current_time - last_data_time).total_seconds()
                        
                        if time_since_last > self.stream_timeout_seconds:
                            inactive_pairs.append(symbol)
                            
                            # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–∞—Ä—ã (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç)
                            if time_since_last > 300:
                                critical_pairs.append(symbol)
                                logger.error(f"üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} —É–∂–µ {time_since_last:.0f} —Å–µ–∫—É–Ω–¥")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} —É–∂–µ {time_since_last:.0f} —Å–µ–∫—É–Ω–¥")
                    else:
                        # –ü–∞—Ä–∞ –≤–æ–æ–±—â–µ –Ω–µ –ø–æ–ª—É—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö
                        inactive_pairs.append(symbol)
                        critical_pairs.append(symbol)
                        logger.error(f"üö® –ö–†–ò–¢–ò–ß–ù–û: {symbol} –Ω–µ –ø–æ–ª—É—á–∞–ª –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                streaming_stats = {
                    "type": "streaming_status",
                    "active_pairs": len(self.trading_pairs) - len(inactive_pairs),
                    "inactive_pairs": len(inactive_pairs),
                    "critical_pairs": len(critical_pairs),
                    "total_pairs": len(self.trading_pairs),
                    "websocket_connected": self.websocket_connected,
                    "streaming_active": self.streaming_active,
                    "messages_received": self.messages_received,
                    "failed_subscriptions": len(self.failed_subscriptions),
                    "pair_details": {
                        symbol: {
                            'last_message': self.last_stream_data.get(symbol).isoformat() if self.last_stream_data.get(symbol) else None,
                            'messages_count': self.pair_statistics.get(symbol, {}).get('messages_count', 0),
                            'is_subscribed': symbol in self.subscribed_pairs,
                            'subscription_attempts': self.pair_statistics.get(symbol, {}).get('subscription_attempts', 0),
                            'subscription_errors': self.pair_statistics.get(symbol, {}).get('subscription_errors', 0)
                        } for symbol in self.trading_pairs
                    },
                    "timestamp": current_time.isoformat()
                }

                await self.connection_manager.broadcast_json(streaming_stats)

                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–∞—Ä –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                critical_threshold = max(1, len(self.trading_pairs) * 0.3)  # 30% –ø–∞—Ä
                
                if len(critical_pairs) >= critical_threshold:
                    logger.error(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–∞—Ä ({len(critical_pairs)}/{len(self.trading_pairs)}). –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    if self.websocket:
                        await self.websocket.close()
                elif len(inactive_pairs) > len(self.trading_pairs) * 0.5:  # 50% –ø–∞—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
                    logger.error(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä ({len(inactive_pairs)}/{len(self.trading_pairs)}). –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    if self.websocket:
                        await self.websocket.close()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
                await asyncio.sleep(60)

    async def _subscription_updater(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –Ω–æ–≤—ã–µ –ø–∞—Ä—ã"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç)
        check_interval_minutes = self.alert_manager.settings.get('pairs_check_interval_minutes', 30)

        logger.info(f"‚öôÔ∏è –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä –∫–∞–∂–¥—ã–µ {check_interval_minutes} –º–∏–Ω—É—Ç")

        while self.is_running:
            try:
                await asyncio.sleep(check_interval_minutes * 60)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã

                if not self.is_running:
                    break

                logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")

                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                current_pairs = set(await self.alert_manager.db_manager.get_watchlist())

                # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –ø–∞—Ä—ã
                new_pairs = current_pairs - self.trading_pairs

                # –ù–∞—Ö–æ–¥–∏–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã
                removed_pairs = self.trading_pairs - current_pairs

                if new_pairs or removed_pairs:
                    await self.handle_pairs_update(new_pairs, removed_pairs)

                self.last_subscription_update = datetime.utcnow()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É

    async def handle_pairs_update(self, new_pairs: Set[str], removed_pairs: Set[str]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∏–∑–≤–Ω–µ)"""
        try:
            if new_pairs or removed_pairs:
                logger.info(f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä: +{len(new_pairs)} –Ω–æ–≤—ã—Ö, -{len(removed_pairs)} —É–¥–∞–ª–µ–Ω–Ω—ã—Ö")

                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                self.trading_pairs.update(new_pairs)
                self.trading_pairs -= removed_pairs

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä
                if new_pairs:
                    await self._load_data_for_new_pairs(new_pairs)

                # –ï—Å–ª–∏ WebSocket –∞–∫—Ç–∏–≤–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
                if self.websocket_connected:
                    await self._update_subscriptions(new_pairs, removed_pairs)

                logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä: {e}")

    async def _load_data_for_new_pairs(self, new_pairs: Set[str]):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            retention_hours = self.alert_manager.settings.get('data_retention_hours', 2)
            analysis_hours = self.alert_manager.settings.get('analysis_hours', 1)
            total_hours_needed = retention_hours + analysis_hours + 1

            logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(new_pairs)} –Ω–æ–≤—ã—Ö –ø–∞—Ä (–ø–µ—Ä–∏–æ–¥: {total_hours_needed}—á)...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞–º–∏
            await self._load_data_for_pairs(list(new_pairs), total_hours_needed, load_type="full")

            logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä: {e}")

    async def _update_subscriptions(self, new_pairs: Set[str], removed_pairs: Set[str]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ WebSocket"""
        try:
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä
            if removed_pairs:
                unsubscribe_message = {
                    "op": "unsubscribe",
                    "args": [f"kline.1.{pair}" for pair in removed_pairs]
                }
                await self.websocket.send(json.dumps(unsubscribe_message))
                logger.info(f"üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {len(removed_pairs)} –ø–∞—Ä")

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
                self.subscribed_pairs -= removed_pairs

                # –£–¥–∞–ª—è–µ–º –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                for pair in removed_pairs:
                    self.last_stream_data.pop(pair, None)
                    self.pair_statistics.pop(pair, None)

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –ø–∞—Ä—ã
            if new_pairs:
                await self._subscribe_to_pairs(new_pairs)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.connection_manager.broadcast_json({
                "type": "subscription_updated",
                "total_pairs": len(self.trading_pairs),
                "subscribed_pairs": len(self.subscribed_pairs),
                "new_pairs": list(new_pairs),
                "removed_pairs": list(removed_pairs),
                "streaming_active": self.streaming_active,
                "timestamp": datetime.utcnow().isoformat()
            })

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ WebSocket: {e}")

    async def _data_range_manager(self):
        """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π"""
        logger.info(f"üìä –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.data_range_check_interval} —Å–µ–∫)")
        
        while self.is_running:
            try:
                await asyncio.sleep(self.data_range_check_interval)

                if not self.is_running:
                    break

                logger.debug("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                for symbol in list(self.trading_pairs):
                    try:
                        await self._maintain_exact_data_range(symbol)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")

                logger.debug("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É

    async def _maintain_exact_data_range(self, symbol: str):
        """–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            retention_hours = self.alert_manager.settings.get('data_retention_hours', 2)
            analysis_hours = self.alert_manager.settings.get('analysis_hours', 1)
            
            # –û–±—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω = retention + analysis (–±–µ–∑ –±—É—Ñ–µ—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
            total_hours = retention_hours + analysis_hours
            expected_candles = total_hours * 60  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
            current_time_ms = int(datetime.utcnow().timestamp() * 1000)
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ –º–∏–Ω—É—Ç—ã
            current_minute_ms = (current_time_ms // 60000) * 60000
            
            # –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ - —Ä–æ–≤–Ω–æ N —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –æ—Ç —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç—ã
            start_time_ms = current_minute_ms - (total_hours * 60 * 60 * 1000)
            end_time_ms = current_minute_ms  # –î–æ —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç—ã (–Ω–µ –≤–∫–ª—é—á–∞—è)

            logger.debug(f"üìä {symbol}: –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {total_hours}—á ({expected_candles} —Å–≤–µ—á–µ–π)")
            logger.debug(f"üìä {symbol}: –î–∏–∞–ø–∞–∑–æ–Ω {datetime.utcfromtimestamp(start_time_ms/1000)} - {datetime.utcfromtimestamp(end_time_ms/1000)}")

            # 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ start_time_ms)
            deleted_count = await self.alert_manager.db_manager.cleanup_old_candles_before_time(symbol, start_time_ms)
            if deleted_count > 0:
                logger.debug(f"üìä {symbol}: –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–≤–µ—á–µ–π")

            # 2. –£–¥–∞–ª—è–µ–º –±—É–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ end_time_ms)
            future_deleted = await self.alert_manager.db_manager.cleanup_future_candles_after_time(symbol, end_time_ms)
            if future_deleted > 0:
                logger.debug(f"üìä {symbol}: –£–¥–∞–ª–µ–Ω–æ {future_deleted} –±—É–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π")

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            integrity_info = await self.alert_manager.db_manager.check_data_integrity_range(
                symbol, start_time_ms, end_time_ms
            )

            current_count = integrity_info.get('total_existing', 0)
            missing_count = integrity_info.get('missing_count', 0)
            
            logger.debug(f"üìä {symbol}: –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {current_count}/{expected_candles}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {missing_count}")

            # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ
            if missing_count > 10:  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ –±–æ–ª—å—à–µ 10 —Å–≤–µ—á–µ–π
                logger.info(f"üìä {symbol}: –ó–∞–≥—Ä—É–∑–∫–∞ {missing_count} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π...")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                success = await self._load_full_period(symbol, start_time_ms, end_time_ms)
                if success:
                    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    new_integrity = await self.alert_manager.db_manager.check_data_integrity_range(
                        symbol, start_time_ms, end_time_ms
                    )
                    new_count = new_integrity.get('total_existing', 0)
                    logger.info(f"üìä {symbol}: –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {new_count}/{expected_candles} —Å–≤–µ—á–µ–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")

    async def _data_cleanup_task(self):
        """–ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        while self.is_running:
            try:
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–π —á–∞—Å
                await asyncio.sleep(3600)

                if not self.is_running:
                    break

                logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

                retention_hours = self.alert_manager.settings.get('data_retention_hours', 2)

                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                for symbol in self.trading_pairs:
                    try:
                        await self.alert_manager.db_manager.cleanup_old_candles(symbol, retention_hours)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")

                logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def _handle_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'success' in data:
                if data['success']:
                    logger.debug("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WebSocket –ø–∞–∫–µ—Ç")
                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–∞—Ä—ã –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ
                    # (—Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∫–∏—Ö –ø–∞—Ä —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏)
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ WebSocket: {data}")
                return

            if 'op' in data:
                logger.debug(f"üì° –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket: {data}")
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
            if data.get('topic', '').startswith('kline.1.'):
                kline_data = data['data'][0]
                symbol = data['topic'].split('.')[-1]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
                if symbol not in self.trading_pairs:
                    logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ watchlist")
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –∑–Ω–∞—á–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
                if symbol in self.subscription_pending:
                    self.subscription_pending.remove(symbol)
                if symbol in self.failed_subscriptions:
                    self.failed_subscriptions.remove(symbol)
                    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {symbol}")
                
                self.subscribed_pairs.add(symbol)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—ã
                if symbol in self.pair_statistics:
                    self.pair_statistics[symbol]['messages_count'] += 1
                    self.pair_statistics[symbol]['last_message_time'] = datetime.utcnow()
                    self.pair_statistics[symbol]['is_subscribed'] = True

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                self.last_stream_data[symbol] = datetime.utcnow()

                # –ë–∏—Ä–∂–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                start_time_ms = int(kline_data['start'])
                end_time_ms = int(kline_data['end'])
                is_closed = kline_data.get('confirm', False)

                # –î–ª—è –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–≤–ª—è–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã, –Ω–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π - –æ–∫—Ä—É–≥–ª—è–µ–º
                if is_closed:
                    # –ó–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ –º–∏–Ω—É—Ç
                    start_time_ms = (start_time_ms // 60000) * 60000
                    end_time_ms = (end_time_ms // 60000) * 60000

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                formatted_data = {
                    'start': start_time_ms,
                    'end': end_time_ms,
                    'open': kline_data['open'],
                    'high': kline_data['high'],
                    'low': kline_data['low'],
                    'close': kline_data['close'],
                    'volume': kline_data['volume'],
                    'confirm': is_closed
                }

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏
                if is_closed:
                    await self._process_closed_candle(symbol, formatted_data)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É (–ø–æ—Ç–æ–∫–æ–≤—ã–µ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ)
                await self.alert_manager.db_manager.save_kline_data(symbol, formatted_data, is_closed)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞–º (–ø–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
                stream_item = {
                    "type": "kline_update",
                    "symbol": symbol,
                    "data": formatted_data,
                    "timestamp": datetime.utcnow().isoformat(),
                    "is_closed": is_closed,
                    "streaming_active": self.streaming_active,
                    "server_timestamp": self.alert_manager._get_current_timestamp_ms() if hasattr(self.alert_manager,
                                                                                                  '_get_current_timestamp_ms') else int(
                        datetime.utcnow().timestamp() * 1000)
                }

                await self.connection_manager.broadcast_json(stream_item)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ kline –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def _process_closed_candle(self, symbol: str, formatted_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏"""
        try:
            start_time_ms = formatted_data['start']

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π
            last_processed = self.processed_candles.get(symbol, 0)
            if start_time_ms > last_processed:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤
                alerts = await self.alert_manager.process_kline_data(symbol, formatted_data)

                # –ü–æ–º–µ—á–∞–µ–º —Å–≤–µ—á—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                self.processed_candles[symbol] = start_time_ms

                logger.debug(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞ {symbol} –≤ {start_time_ms}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ –¥–ª—è {symbol}: {e}")

    async def _monitor_connection(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        connection_start_time = datetime.utcnow()
        
        while self.is_running and self.websocket_connected:
            try:
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

                if not self.websocket_connected:
                    break

                current_time = datetime.utcnow()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if self.last_message_time:
                    time_since_last_message = (current_time - self.last_message_time).total_seconds()

                    if time_since_last_message > 90:  # 90 —Å–µ–∫—É–Ω–¥ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
                        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket —É–∂–µ {time_since_last_message:.0f} —Å–µ–∫—É–Ω–¥")

                        await self.connection_manager.broadcast_json({
                            "type": "connection_status",
                            "status": "warning",
                            "reason": f"No messages for {time_since_last_message:.0f} seconds",
                            "streaming_active": False,
                            "timestamp": current_time.isoformat()
                        })

                        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                        if time_since_last_message > 300:  # –°–Ω–∏–∂–µ–Ω–æ —Å 120 –¥–æ 300 —Å–µ–∫—É–Ω–¥
                            logger.error("‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
                            self.streaming_active = False
                            break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                connection_duration = (current_time - connection_start_time).total_seconds()
                if connection_duration > self.connection_stable_time:
                    # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                    self.reconnect_attempts = 0

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                break

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.is_running = False
        self.websocket_connected = False
        self.streaming_active = False
        
        if self.ping_task:
            self.ping_task.cancel()
            try:
                await self.ping_task
            except asyncio.CancelledError:
                pass
                
        if self.subscription_update_task:
            self.subscription_update_task.cancel()
            try:
                await self.subscription_update_task
            except asyncio.CancelledError:
                pass

        if self.data_range_manager_task:
            self.data_range_manager_task.cancel()
            try:
                await self.data_range_manager_task
            except asyncio.CancelledError:
                pass

        if self.stream_monitor_task:
            self.stream_monitor_task.cancel()
            try:
                await self.stream_monitor_task
            except asyncio.CancelledError:
                pass

        if self.subscription_retry_manager_task:
            self.subscription_retry_manager_task.cancel()
            try:
                await self.subscription_retry_manager_task
            except asyncio.CancelledError:
                pass
                
        if self.websocket:
            try:
                await self.websocket.close()
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket: {e}")
                
        logger.info("üõë WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_subscription_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫"""
        return {
            'total_pairs': len(self.trading_pairs),
            'subscribed_pairs': len(self.subscribed_pairs),
            'pending_pairs': len(self.subscription_pending),
            'failed_pairs': len(self.failed_subscriptions),
            'last_update': self.last_subscription_update.isoformat() if self.last_subscription_update else None,
            'subscription_rate': len(self.subscribed_pairs) / len(
                self.trading_pairs) * 100 if self.trading_pairs else 0,
            'data_loading_complete': self.data_loading_complete,
            'initial_subscription_complete': self.initial_subscription_complete,
            'websocket_connected': self.websocket_connected,
            'streaming_active': self.streaming_active,
            'reconnect_attempts': self.reconnect_attempts,
            'max_reconnect_attempts': self.max_reconnect_attempts,
            'messages_received': self.messages_received,
            'active_streams': len([s for s, t in self.last_stream_data.items() 
                                 if (datetime.utcnow() - t).total_seconds() < self.stream_timeout_seconds]),
            'pair_statistics': self.pair_statistics,
            'data_load_times': {symbol: datetime.utcfromtimestamp(timestamp/1000).isoformat() 
                               for symbol, timestamp in self.last_data_load_time.items()}
        }